

from aiogram import types

from aiogram.dispatcher.filters import BoundFilter
#from aiogram.types import  ChatMemberRestricted
from datetime import datetime
from keyboard.main import help_perexod

register_datatime=dict()
import sqlite3
connect = sqlite3.connect("himera.db")
cursor = connect.cursor()
"""class IsRegister(BoundFilter):
    async def check(self, message):
        user_id = message.from_user.id
        cursor.execute(f"SELECT user_id FROM users WHERE user_id = {user_id}")
        if cursor.fetchone() is None:
            need_seconds = 86400
            current_time = datetime.now()
            last_datetime = register_datatime.get(message.from_user.id)
            register_datatime[message.from_user.id] = current_time

            # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—Ä–µ–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ)
            if not last_datetime:
                register_datatime[message.from_user.id] = current_time
                last_datetime = datetime.fromtimestamp(0)
            if last_datetime:
                # –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                delta_seconds = (current_time - last_datetime).total_seconds()

                # –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                seconds_left = int(need_seconds - delta_seconds)
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å
                if seconds_left > 0:
                    pass
                else:
                    register_datatime[message.from_user.id] = current_time
                    name1 = message.from_user.get_mention(as_html=True)
                    await message.reply(
                        f' üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å  {name1}\nüé≥ –Ø - –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –•–∏–º–µ—Ä–∞!\n\n<b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ –õ–∏—á–Ω—ã–µ –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞</b>',
                        reply_markup=help_perexod, parse_mode='html')
                    return False
        else:
            return True"""
class IsRegister2(BoundFilter):
    async def check(self, message):
        user_id = message.from_user.id
        cursor.execute(f"SELECT user_id FROM users WHERE user_id = {user_id}")
        if cursor.fetchone() is None:
            name1 = message.from_user.get_mention(as_html=True)
            await message.reply(
                f' üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å  {name1}\nüé≥ –Ø - –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –•–∏–º–µ—Ä–∞!\n\n<b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ –õ–∏—á–Ω—ã–µ –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞</b>',
                reply_markup=help_perexod, parse_mode='html')
            return False
        else:
            return True
class IsRegister3(BoundFilter):
    async def check(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        user_name_new = callback.from_user.full_name
        cursor.execute(f"SELECT user_id FROM users WHERE user_id = {user_id}")
        if cursor.fetchone() is None:
            await callback.message.answer(
                f' üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å  <a href="tg://user?id={user_id}">{user_name_new}</a> \nüé≥ –Ø - –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –•–∏–º–µ—Ä–∞!\n\n<b>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ –õ–∏—á–Ω—ã–µ –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞</b>',
                reply_markup=help_perexod, parse_mode='html')
            return False
        else:
            return True